generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  groups           UserGroup[]
  conversations    ConversationUser[]
}

model Message {
  id             String   @id @default(uuid())
  senderId       String
  receiverId     String?
  groupId        String?
  conversationId String?
  content        String
  createdAt      DateTime @default(now())

  sender         User  @relation(fields: [senderId], references: [id], name: "SentMessages")
  receiver       User? @relation(fields: [receiverId], references: [id], name: "ReceivedMessages")
  group          Group? @relation(fields: [groupId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade) // Cascade delete here
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  participants ConversationUser[]
  messages    Message[]
}

model ConversationUser {
  userId         String
  conversationId String

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade) // Cascade delete here

  @@id([userId, conversationId])
}

model Group {
  id        String   @id @default(uuid())
  name      String   @unique
  isGlobal  Boolean  @default(false)
  createdAt DateTime @default(now())

  users    UserGroup[] 
  messages Message[]
}

model UserGroup {
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}
